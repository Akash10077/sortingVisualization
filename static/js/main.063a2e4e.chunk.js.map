{"version":3,"sources":["components/Navbar/graph.svg","components/Navbar/Navbar.js","components/ListBlocks/ListBlocks.js","components/Legends/Legends.js","algorithms/bubbleSort.js","algorithms/insertionSort.js","algorithms/selectionSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","App.js","index.js"],"names":["Navbar","handleLength","handleSpeed","handleAlgo","generateRandomArray","handleSort","sorting","completed","len","speed","algo","src","graph","alt","className","width","height","type","onChange","min","max","value","Math","ceil","disabled","step","onClick","ListBlocks","blocks","compare","sorted","swap","useState","window","innerWidth","length","setWidth","color","useEffect","addEventListener","map","block","i","bg","includes","style","Legends","arr","j","temp","bubbleSort","dupBlocks","slice","order","push","insertionSort","selectionSort","mergeSortHelper","l","r","mid","floor","merge","mergeSort","quickSortHelper","pivot","random","m","partition","quickSort","App","setCompleted","setSorting","setSortedIndex","randomArray","Array","from","keys","randomIndex","setBlocks","setAlgo","setLength","setSpeed","setCompare","setSwap","sortedIndex","event","Number","target","sortAccOrder","loop","setTimeout","k","index","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.063a2e4e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/graph.ed81e779.svg\";","import React from 'react'\nimport './Navbar.css'\nimport graph from './graph.svg'\n\n\nconst Navbar = ({ handleLength, handleSpeed, handleAlgo, generateRandomArray, handleSort, sorting, completed, len, speed, algo }) =>{\n\n    return (\n        <nav>\n            <img src={graph} alt=\"graph\" className='img1' width=\"60\" height=\"60\"/>\n                        <div className='nav-brand'>Sorting Visualizer</div>\n\n            <div className='toolbox'>\n                <div>\n                    <div className='group speed'>\n                        <label>Speed</label>\n                        <input type='range' onChange={handleSpeed} min='1' max='50' value={Math.ceil(400 / speed)} disabled={sorting}></input>\n                    </div>\n\n                    <div className='group length'>\n                        <label>Length</label>\n                        <input type='range' onChange={handleLength} min='5' max={100} step='1' disabled={sorting} value={len}></input>\n                    </div>\n                    \n                    <select onChange={handleAlgo} disabled={sorting} value={algo}>\n                        <option value='bubbleSort'>Bubble Sort</option>\n                        <option value='insertionSort'>Insertion Sort</option>\n                        <option value='selectionSort'>Selection Sort</option>\n                        <option value='mergeSort'>Merge Sort</option>\n                        <option value='quickSort'>Quick Sort</option>\n                    </select>\n                </div>\n                \n                <div>\n                    <button  onClick={generateRandomArray} disabled={sorting}>Random</button>\n                    <button  onClick={handleSort} disabled={sorting || completed}>Sort</button>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar","import React, { useState, useEffect } from 'react'\nimport './ListBlocks.css'\n\nfunction ListBlocks({ blocks, compare, sorted, swap }){\n    const [width, setWidth] = useState(Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 5))\n    const color = blocks.length <= 50 && width > 14 ? 'black' : 'transparent'\n\n    useEffect(() => {\n        const handleResize = () => {\n            setWidth(Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 8))\n        }\n\n        window.addEventListener('resize', handleResize)\n\n        setWidth(Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 8))\n    }, [blocks.length])\n\n    return (\n        <div className='listBlocks'>\n\n            {blocks.map((block, i) => {\n                const height = block * 500 / blocks.length;\n                let bg = '#1affff'\n\n                // i th element is being compared with some other element\n                if(compare && (i === compare[0] || i === compare[1])){\n                    bg = '#ffff4d'\n                }\n\n                if(swap && (i === swap[0] || i === swap[1])){\n                    bg='#ff1a1a'\n                }\n                // i th element is in its correct position\n                if(sorted && sorted.includes(i)){\n                    bg = '#1aff1a'\n                }\n\n                const style = {\n                    'backgroundColor': bg,\n                    'color': color, \n                    'height': height, \n                    'width': width\n                }\n                return (<div key={i} className='block' style={style}>{block}</div>)\n            })}\n        </div>\n    );\n}\n\nexport default ListBlocks\n","import React from 'react'\nimport './Legends.css'\n\nconst Legends = ({algo}) => {\n    return (\n        <div className='legends'>\n            <div className='key'> \n                <span className='sq compare'></span> Compare\n            </div>\n            <div className='key'> \n                <span className='sq swap'></span> {algo !== 'mergeSort' ? 'Swap' : ' Auxillary Space'}\n            </div>\n            <div className='key'> \n                <span className='sq sorted'></span> Sorted\n            </div>\n        </div>\n    )\n}\n\nexport default Legends\n","const swap = (arr, i, j) => {\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n}\n\nconst bubbleSort = (blocks) => {\n\n    const dupBlocks = blocks.slice() // copying blocks array\n    const order = []\n\n    let i, j\n    \n    for (i = 0; i < dupBlocks.length; i++) {\n        for (j = 0; j < dupBlocks.length - i - 1; j++) {\n\n            order.push([j, j + 1, null, null])                  // Compare\n            if (dupBlocks[j] > dupBlocks[j + 1]) {\n                swap(dupBlocks, j, j + 1)\n                order.push([j, j + 1, dupBlocks.slice(), null]) // Swap\n            }\n        }\n        order.push([null, null, null, j]) // j-th element is in correct position ( Sorted )\n    }\n\n    return order\n}\n\nexport default bubbleSort\n\n","const swap = (arr, i, j) => {\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n}\n\nconst insertionSort = (blocks) => {\n\n    const dupBlocks = blocks.slice() // copying blocks array\n    const order = []\n\n    let i, j\n    \n    for (i = 0; i < dupBlocks.length; i++) {\n        j = i - 1\n        while(j >= 0 && dupBlocks[j] > dupBlocks[j + 1]){\n            swap(dupBlocks, j, j + 1)\n            order.push([j, j + 1, null, null])              // Compare\n            order.push([j, j + 1, dupBlocks.slice(), null]) // Swap\n            j -= 1\n        }\n    }\n\n    for(i=0;i<dupBlocks.length;i++){\n        order.push([null, null, null, i])\n    }\n\n    return order\n}\n\nexport default insertionSort","const swap = (arr, i, j) => {\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n}\n\nconst selectionSort = (blocks) => {\n\n    const dupBlocks = blocks.slice() // copying blocks array\n    const order = []\n\n    let i, j\n    \n    for (i = 0; i < dupBlocks.length; i++) {\n        for (j = i + 1; j < dupBlocks.length; j++) {\n\n            order.push([i, j, null, null])                  // Compare\n            if (dupBlocks[i] > dupBlocks[j]) {\n                swap(dupBlocks, i, j)\n                order.push([i, j, dupBlocks.slice(), null]) // Swap\n            }\n        }\n        order.push([null, null, null, i]) // i-th element is in correct position ( Sorted )\n    }\n\n    return order\n}\n\nexport default selectionSort","let order = []\n\nconst merge = (dupBlocks, l, mid, r) => {\n    let i = l, j = mid + 1\n\n    const arr = [] \n\n    while((i <= mid) && (j <= r)){\n        order.push([i, j, null, null])      // Compare i th and j th element  \n        if(dupBlocks[i] <= dupBlocks[j]){\n            arr.push(dupBlocks[i++])\n        } else {\n            arr.push(dupBlocks[j++])\n        }\n    }\n\n    while(i <= mid){\n        order.push([i, null, null, null])\n        arr.push(dupBlocks[i++])\n    }\n\n    while(j <= r){\n        order.push([null, j, null, null])\n        arr.push(dupBlocks[j++])\n    }\n    \n    for(i=l;i<=r;i++){\n        dupBlocks[i] = arr[i - l]\n        order.push([i, null, dupBlocks.slice(), null]) \n    }\n\n}\n\nconst mergeSortHelper = (dupBlocks, l, r) => {\n    if(l >= r) \n        return \n    \n    const mid = Math.floor((l + r) / 2)\n\n    mergeSortHelper(dupBlocks, l, mid)\n    mergeSortHelper(dupBlocks, mid + 1, r) \n    \n    merge(dupBlocks, l, mid, r)\n}\n\nconst mergeSort = (blocks) => {\n    order = []\n    const dupBlocks = blocks.slice() // copying blocks array\n    \n    mergeSortHelper(dupBlocks, 0, dupBlocks.length - 1)\n    \n    for(let i=0;i<dupBlocks.length;i++){\n        order.push([null, null, null, i]) // i th element will be in correct position\n    }\n\n    return order\n}\n\nexport default mergeSort","let order = []\n\nconst swap = (arr, i, j) => {\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n}\n\nconst partition = (dupBlocks, l, r) => {\n    const pivot = l \n    let j = l \n\n    for(let i = l + 1;i<=r;i++){\n        order.push([i, pivot, null, null])\n        if(dupBlocks[i] < dupBlocks[pivot]){\n            j += 1 \n            swap(dupBlocks, i, j)\n            order.push([i, j, dupBlocks.slice(), null])\n        }\n    }\n\n    swap(dupBlocks, pivot, j)\n    order.push([pivot, j, dupBlocks.slice(), null])\n    order.push([null, null, null, j])\n    return j\n}\n\n\nconst quickSortHelper = (dupBlocks, l, r) => {\n    if(l >= r) {\n        if(l === r) order.push([null, null, null, l])\n        return\n    } \n\n    const pivot = l + Math.floor(Math.random() * (r - l))\n\n    swap(dupBlocks, l, pivot)\n    order.push([l, pivot, dupBlocks.slice(), null])\n\n    const m = partition(dupBlocks, l, r)\n\n    quickSortHelper(dupBlocks, l, m - 1)\n    quickSortHelper(dupBlocks, m + 1, r)\n\n    return\n}\n\nconst quickSort = (blocks) => {\n    const dupBlocks = blocks.slice() // Copying blocks array\n    order = []\n    \n    quickSortHelper(dupBlocks, 0, dupBlocks.length - 1)\n    \n    return order\n}\n\nexport default quickSort\n\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nimport Navbar from './components/Navbar/Navbar'\nimport ListBlocks from './components/ListBlocks/ListBlocks'\nimport Legends from './components/Legends/Legends'\n\n// Algorithms\nimport bubbleSort from './algorithms/bubbleSort'\nimport insertionSort from './algorithms/insertionSort'\nimport selectionSort from './algorithms/selectionSort'\nimport mergeSort from './algorithms/mergeSort'\nimport quickSort from './algorithms/quickSort'\n\nfunction App() {\n\t// Generating shuffled array of 1 to len\n\tconst generateRandomArray = (len) => {\n\t\tsetCompleted(false)\n\t\tsetSorting(false)\n\t\tsetSortedIndex([])\n\n\t\tconst randomArray = Array.from(Array(len + 1).keys()).slice(1)\n\t\t\n\t\tfor (let i = randomArray.length - 1; i > 0; i--) {\n\t\t\tconst randomIndex = Math.floor(Math.random() * (i - 1))\n\t\t\tconst temp = randomArray[i]\n\n\t\t\trandomArray[i] = randomArray[randomIndex]\n\t\t\trandomArray[randomIndex] = temp\n\t\t}\n\t\t\n\t\tsetBlocks(randomArray)\n\t}\n\n\t// States\n\tconst [algo, setAlgo] = useState('bubbleSort')\n\tconst [len, setLength] = useState(30)\n\tconst [blocks, setBlocks] = useState([])\n\tconst [sorting, setSorting] = useState(false)\n\tconst [completed, setCompleted] = useState(true)\n\tconst [speed, setSpeed] = useState(15)\n\tconst [compare, setCompare] = useState([])\n\tconst [swap, setSwap] = useState([])\n\tconst [sortedIndex, setSortedIndex] = useState([])\n\n\t// Generating random array every time the length is changed by th user\n\tuseEffect(() => {\n\t\tgenerateRandomArray(len)\n\t}, [len, algo])\n\n\t// setting the selected algorithm\n\tconst handleAlgo = (event) => {\n\t\tsetAlgo(event.target.value)\n\t}\n\n\t// handling the length of the array\n\tconst handleLength = (event) => {\n\t\tsetLength(Number(event.target.value))\n\t}\n\n\t// handling the speed of sorting\n\tconst handleSpeed = (event) => {\n\t\tsetSpeed(Math.ceil(400 / Number(event.target.value)))\n\t}\n\n\t// Sorting according to the algorithm\n\tconst handleSort = () => {\n\t\t\n\t\tconst sortAccOrder = (order) => {\n\t\t\t(function loop(i) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tconst [j, k, arr, index] = order[i]\n\t\t\t\t\tsetCompare([j, k])\n\t\t\t\t\tsetSwap([])\n\n\t\t\t\t\tif(index !== null){\n\t\t\t\t\t\tsetSortedIndex((prevState) => (\n\t\t\t\t\t\t\t[...prevState, index]\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif(arr){\n\t\t\t\t\t\t\n\t\t\t\t\t\tsetBlocks(arr)\n\t\t\t\t\t\tif(j !== null || k != null)\n\t\t\t\t\t\t\tsetSwap([j, k])\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (++i < order.length){\n\t\t\t\t\t\tloop(i)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetSorting(false)\n\t\t\t\t\t\tsetCompleted(true)\n\t\t\t\t\t}   \n\t\t\t\t}, speed)\n\t\t\t})(0)\n\t\t\t\n\t\t}\n\n\t\tsetSorting(true)\n\n\t\talgo === 'bubbleSort' ? sortAccOrder(bubbleSort(blocks)) : \n\t\talgo === 'insertionSort' ?  sortAccOrder(insertionSort(blocks)) :\n\t\talgo === 'selectionSort' ? sortAccOrder(selectionSort(blocks)) :\n\t\talgo === 'mergeSort' ? sortAccOrder(mergeSort(blocks)) : \n\t\talgo === 'quickSort' ? sortAccOrder(quickSort(blocks)) : (() => {\n\t\t\tsetSorting(false)\n\t\t\tsetCompleted(true)\n\t\t})()\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Navbar \n\t\t\t\tgenerateRandomArray={() => generateRandomArray(len)}\n\t\t\t\thandleLength={handleLength} \n\t\t\t\thandleSpeed={handleSpeed}\n\t\t\t\thandleAlgo={handleAlgo}\n\t\t\t\thandleSort={handleSort} \n\t\t\t\tsorting={sorting}\n\t\t\t\tcompleted={completed}\n\t\t\t\tlen={len}\n\t\t\t\tspeed={speed}\n\t\t\t\talgo={algo}\n\t\t\t/>\n\t\t\t\n\t\t\t<ListBlocks \n\t\t\t\tblocks={blocks} \n\t\t\t\tcompare={sorting && compare}\n\t\t\t\tswap={sorting && swap}\n\t\t\t\tsorted={sortedIndex} \n\t\t\t/>\n\n\t\t\t<Legends algo={algo}/>\n\t\t</div>\n\t);\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}